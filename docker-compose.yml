# docker-compose.yml=It acts as a blueprint, describing the services that make up an application, along with their configurations, dependencies, networks, and volumes.
# 	Defines containers and links Laravel to Docker via volumes
# version: "3.8"

services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
        entrypoint: ["sh", "/usr/local/bin/entrypoint.sh"]
        container_name: ecommerce-project
        restart: unless-stopped
        working_dir: /var/www
        volumes:
            - .:/var/www

        networks:
            - laravel

    webserver:
        image: nginx:alpine
        container_name: nginx-server
        restart: unless-stopped
        ports:
            - "80:80"
        volumes:
            - .:/var/www
            - ./docker/nginx/conf.d:/etc/nginx/conf.d
        depends_on:
            - app
        networks:
            - laravel

    db:
        image: mysql:8.0
        container_name: mysql-db
        restart: unless-stopped
        ports:
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: ecommerce
            MYSQL_USER: user
            MYSQL_PASSWORD: secret
        volumes:
            - dbdata:/var/lib/mysql
        networks:
            - laravel

    redis:
        image: redis:alpine
        container_name: redis
        restart: unless-stopped
        ports:
            - "6379:6379"
        networks:
            - laravel

networks:
    laravel:
        driver: bridge

volumes:
    dbdata:
# Redis is like a super fast, super smart box where your website can quickly keep and get important stuff it needs right away.

# The volumes section tells Docker to share files or directories between your computer (host) and the container.
# :/var/www -Is the path inside the container where the current directory will be mounted.

#  You do NOT need a separate php-fpm service in docker-compose.yml.
# âœ… You DO need to make sure your Dockerfile installs PHP-FPM.
