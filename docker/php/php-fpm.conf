# php-fpm.conf controls PHP worker processes and logging.
# Works with Nginx in Docker by listening on port 9000.
# Helps optimize PHP performance and debugging in Dockerized Laravel apps.
# PHP-FPM runs PHP code when your web server (like Nginx) asks for it.

[global]
pid = /run/php-fpm.pid
error_log = /proc/self/fd/2
include=/usr/local/etc/php-fpm.d/*.conf
# Save process ID (pid) here.
# Send error messages to Docker logs (so you can see them).
# Include other config files.


[www]
user = www-data
group = www-data
listen = 0.0.0.0:9000
listen.owner = www-data
listen.group = www-data
#[www] is the name of a PHP-FPM pool. A pool is a group of PHP-FPM workers (processes) that handle PHP requests.
# www-data=	A safe, limited user for web processes.
# This block tells PHP-FPM to run PHP worker processes as www-data user/group and listen on port 9000 for incoming PHP requests (usually forwarded by Nginx).

pm = dynamic
pm.max_children = 10
pm.start_servers = 4
pm.min_spare_servers = 2
pm.max_spare_servers = 6
pm.max_requests = 500
# pm = dynamic
# PHP-FPM will create and stop PHP worker processes automatically depending on how busy your site is.

# pm.max_children = 10
# The maximum number of PHP worker processes that can run at the same time is 10. This limits resource usage.

# pm.start_servers = 4
# When PHP-FPM starts, it will create 4 worker processes ready to handle requests.

# pm.min_spare_servers = 2
# PHP-FPM tries to keep at least 2 idle (spare) workers waiting, so new requests don‚Äôt wait.

# pm.max_spare_servers = 6
# PHP-FPM won‚Äôt keep more than 6 idle workers ‚Äî it will stop extra workers to save resources.

# pm.max_requests = 500
# Each PHP worker will handle 500 requests and then restart. This helps clear memory leaks and keeps things stable.

# This config tells PHP-FPM how many PHP worker processes to run and how to manage them based on traffic ‚Äî helping your Laravel site handle requests efficiently without wasting resources.


catch_workers_output = yes
# Makes sure any output (like errors or warnings) from PHP worker processes is captured and sent to the PHP-FPM logs

access.log = /proc/self/fd/2
# This tells PHP-FPM to send access logs (basic request info) to standard error output (stderr).
# üß† Why /proc/self/fd/2?
# In Linux, /proc/self/fd/2 points to stderr.
# It allows logs to be visible in Docker logs or in your terminal (if you're running PHP-FPM manually).
# üì¶ In Docker: This is useful because Docker captures logs from stderr.

access.format = "%R - %u %t \"%m %r\" %s %f %{mili}d %{kilo}M %C%%"
# üìù Each log line will show:IP - user time "METHOD URI" status script time memory CPU%

request_slowlog_timeout = 5s
# If a PHP script runs longer than 5 seconds, it's considered "slow".

slowlog = /var/log/php-fpm/slow.log
# This is the file where slow PHP requests are recorded.